{
	"name": "DF_Remove_Duplicates",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_ADLS_gg1adls3_employee",
						"type": "DatasetReference"
					},
					"name": "Employee"
				},
				{
					"dataset": {
						"referenceName": "DS_ADLS_gg1adls3_employee2",
						"type": "DatasetReference"
					},
					"name": "Employee1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Target_DistictRows",
						"type": "DatasetReference"
					},
					"name": "EmployeeDistinctRows"
				}
			],
			"transformations": [
				{
					"name": "AllRowsOfEmployee"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "sort1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {EMP-ID} as string,",
				"          Name as string,",
				"          Designation as string,",
				"          Salary as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Employee",
				"source(output(",
				"          {EMP-ID} as string,",
				"          Name as string,",
				"          Designation as string,",
				"          Salary as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Employee1",
				"Employee, Employee1 union(byName: true)~> AllRowsOfEmployee",
				"AllRowsOfEmployee aggregate(groupBy({EMP-ID}),",
				"     each(match(name != 'EMP-ID'), $$ = first($$))) ~> aggregate1",
				"aggregate1 sort(asc({EMP-ID}, true)) ~> sort1",
				"sort1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Name as string,",
				"          Designation as string,",
				"          Salary as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> EmployeeDistinctRows"
			]
		}
	}
}