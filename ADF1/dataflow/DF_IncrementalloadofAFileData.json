{
	"name": "DF_IncrementalloadofAFileData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_adls_adf1_input_orders",
						"type": "DatasetReference"
					},
					"name": "sourceOrders"
				},
				{
					"dataset": {
						"referenceName": "DS_db_Orders",
						"type": "DatasetReference"
					},
					"name": "DestinationOrders"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_db_Orders",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "HashColumnforSourcefile"
				},
				{
					"name": "HashColumnforDestinationOrders"
				},
				{
					"name": "ifnotexist"
				}
			],
			"scriptLines": [
				"source(output(",
				"          orderid as integer,",
				"          {itemname } as string,",
				"          price_of_item as decimal(10,0) '000,000,000.000',",
				"          quantity as integer,",
				"          total_cost as decimal(10,0) '000,000,000.000',",
				"          LastModifytime as timestamp 'MM/dd/yyyy HH:mm:ss'",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceOrders",
				"source(output(",
				"          orderid as integer,",
				"          itemname as string,",
				"          price_of_item as decimal(10,2),",
				"          quantity as integer,",
				"          total_cost as decimal(10,2),",
				"          LastModifytime as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DestinationOrders",
				"sourceOrders derive(SourceHashColumn = sha2(256, orderid)) ~> HashColumnforSourcefile",
				"DestinationOrders derive(DestinationHashColumn = sha2(256, orderid)) ~> HashColumnforDestinationOrders",
				"HashColumnforSourcefile, HashColumnforDestinationOrders exists(SourceHashColumn==DestinationHashColumn,",
				"     negate:true,",
				"     broadcast: 'auto')~> ifnotexist",
				"ifnotexist sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          orderid as integer,",
				"          itemname as string,",
				"          price_of_item as decimal(10,2),",
				"          quantity as integer,",
				"          total_cost as decimal(10,2),",
				"          LastModifytime as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          orderid,",
				"          itemname = {itemname },",
				"          price_of_item,",
				"          quantity,",
				"          total_cost,",
				"          LastModifytime",
				"     ),",
				"     preCommands: [],",
				"     postCommands: []) ~> sink1"
			]
		}
	}
}